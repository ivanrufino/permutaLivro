<?phpclass MY_Parser extends CI_Parser {    /** @var array */    public $data = array();            /*       *  A cada momento que for usada a class, o método construct é executado, gerando     *  os indexs de array e evitando erros nos adc_js e adc_css     */    public function __construct(){                $this->data['css_list'] = '';        $this->data['js_list'] = '';                $this->data['rsc_url'] = base_url() .'assets';                 $this->data['local'] = base_url() .'assets/';                 $this->data['base_url'] = base_url() ;             }    /*     *  Faz com que seja carregada o template e embutido as views, para depois trocar     *  as {chaves} por valores     */        public function mostrar($template, $views, $dados) {        // junta os dados produzidos pela classe com os do desenvolvedor        foreach ($dados as $key => $data) {            $this->data[$key] = $data;        }        // carregar multiplas views, ou não!        if (is_string($views))            $views = array($views);        foreach ($views as $key => $view)            $this->data['view_' . $key] = $this->parse($view, $this->data, TRUE);        // exibe a página        $this->parse($template, $this->data);    }        /*     *  Foi parcialmente reescrito para que seja carregada diversos .phps para as     *  views e templates, e só depois, trocar as {chaves}, funciona para com o DOM Pdf     */        public function parse($template, $data, $return = FALSE) {               foreach ($data as $key => $d) {            $this->data[$key] = $d;        }                return parent::parse($template, $this->data, $return);    }            /*     *  Métodos para adicionar JavaScripts e CSS sem ter que escrever na view,     *  tornando o uso de template algo mais econômico, podendo ser usada em 2 views     *  e carregando a mesma template, sem se importar com JS e CSS deixem pesadas a página     */        public function adc_js($js) {        $str = '<script src="'. base_url() .'assets/js/%s.js" type="text/javascript"></script>';        // concatenando os javascripts        if(is_array($js)) {            foreach($js as $javascript) {                $this->data['js_list'] .= sprintf($str, $javascript);            }        } else {            $this->data['js_list'] .= sprintf($str, $js);        }    }        /**     * Função para adicionar css a página     *      * @param mixed $css nome dos arquivo css a ser carregado.     * @param string $flag dos arquivo css a ser carregado.     * @param boolean $print     * @return null     */    public function adc_css($css, $flag = '', $print=false) {                if ($print) $print = 'media="print"';                $str = '<link href="'. base_url() .'assets/css/%s.css" rel="stylesheet" type="text/css" ' . $print . '/>';        if(!empty($flag)) {            $str = '<!--[if ' . $flag . ']>'. $str . '<![endif]-->';        }                // concatenando os css        if(is_array($css)) {            foreach($css as $c) {                $this->data['css_list'] .= sprintf($str, $c);            }        } else {            $this->data['css_list'] .= sprintf($str, $css);        }    }    }